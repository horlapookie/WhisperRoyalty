
import OpenAI from 'openai';
import { settings } from '../settings.js';

export const command = {
    name: 'ai-image',
    aliases: ['aiimg', 'dall-e', 'dalle'],
    description: 'Generate images using OpenAI DALL-E',
    usage: 'ai-image <prompt>',
    category: 'ai',
    cooldown: 10,

    async execute(sock, msg, args, context) {
        const { from, sender } = context;

        if (!args.trim()) {
            await sock.sendMessage(from, {
                text: '‚ùå Please provide an image description!\n\nExample: .ai-image a beautiful sunset over mountains'
            });
            return;
        }

        const prompt = args.trim();

        try {
            await sock.sendMessage(from, {
                react: { text: 'üé®', key: msg.key }
            });

            // Check if OpenAI API key is available
            if (!settings.openaiApiKey || settings.openaiApiKey === 'your_openai_api_key_here' || settings.openaiApiKey.length < 10) {
                await sock.sendMessage(from, {
                    text: '‚ùå OpenAI API key not configured properly. Please contact the bot owner to set up image generation.'
                });
                return;
            }

            const openai = new OpenAI({
                apiKey: settings.openaiApiKey.trim(),
                timeout: 60000, // 60 second timeout
                maxRetries: 2,
            });

            await sock.sendMessage(from, {
                text: 'üé® Generating your image... This may take a moment.'
            });

            // Try DALL-E 3 first, fallback to DALL-E 2 if billing issues
            let response;
            try {
                response = await openai.images.generate({
                    model: "dall-e-3",
                    prompt: prompt,
                    n: 1,
                    size: "1024x1024",
                    quality: "standard",
                });
            } catch (dalle3Error) {
                if (dalle3Error.code === 'billing_hard_limit_reached') {
                    // Try DALL-E 2 as fallback
                    try {
                        response = await openai.images.generate({
                            model: "dall-e-2",
                            prompt: prompt,
                            n: 1,
                            size: "1024x1024",
                        });
                    } catch (dalle2Error) {
                        throw dalle2Error;
                    }
                } else {
                    throw dalle3Error;
                }
            }

            const imageUrl = response.data[0].url;

            const modelUsed = response.data[0].revised_prompt ? "DALL-E 3" : "DALL-E 2";
            
            await sock.sendMessage(from, {
                image: { url: imageUrl },
                caption: `üé® *AI Generated Image*\n\nüìù **Prompt:** ${prompt}\nü§ñ **Model:** ${modelUsed}\n‚ö° **Generated by ${settings.botName}**`,
                contextInfo: {
                    forwardingScore: 1,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363420639943950@newsletter',
                        newsletterName: `${settings.botName} Updates`,
                        serverMessageId: Math.floor(Math.random() * 1000000)
                    },
                    externalAdReply: {
                        title: 'AI Image Generator',
                        body: 'Powered by OpenAI DALL-E',
                        thumbnailUrl: 'https://files.catbox.moe/bh2fpj.jpg',
                        sourceUrl: 'https://openai.com',
                        mediaType: 1,
                        renderLargerThumbnail: false
                    }
                }
            });

        } catch (error) {
            console.error('AI Image Generation Error:', error);
            let errorMessage = '‚ùå Failed to generate image. ';
            
            if (error.code === 'insufficient_quota') {
                errorMessage += 'OpenAI quota exceeded. Please try again later.';
            } else if (error.code === 'content_policy_violation') {
                errorMessage += 'Your prompt violates OpenAI content policy. Please try a different description.';
            } else {
                errorMessage += `${error.message}`;
            }

            await sock.sendMessage(from, {
                text: errorMessage
            });
        }
    }
};
